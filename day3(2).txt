//The difference between window, screen, and document in JavaScript

windows :

Window is the main JavaScript object root, aka the global object in a browser, and it can also be treated as the root of the document object model. You can access it as window.
The window is the first thing that gets loaded into the browser. This window object has the majority of the properties like length, innerWidth, innerHeight, name, if it has been closed, its parents, and more.
window is the execution context and global object for that context’s JavaScript
Each browser tab has its own top-level window object. Each <iframe> (and deprecated <frame>) element has its own window object too, nested within a parent window.
Each of these windows gets its own separate global object. window.window always refers to window, but window.parent and window.top might refer to enclosing windows, giving access to other execution contexts.


Document :

Each window object has a document object to be rendered.
These objects get confused in part because HTML elements are added to the global object when assigned a unique id. E.g., in the HTML snippet
the paragraph element can be referenced by any of the following:

window.holyCow or window["holyCow"]
document.getElementById("holyCow")
document.querySelector("#holyCow")
document.body.firstChild
document.body.children[0]

Screen :

The window object also has a screen object with properties describing the physical display:

a.screen properties width and height are the full screen

b.screen properties availWidth and availHeight omit the toolbar
The portion of a screen displaying the rendered document is the viewport in JavaScript, which is potentially confusing because we call an application’s portion of the screen a window when talking about interactions with the operating system. 
The screen is the screen, it contains properties about the user’s display.
The portion of a screen displaying the rendered document is the viewport in JavaScript, which is potentially confusing because we call an application’s portion of the screen a window when talking about interactions with the operating system.
The getBoundingClientRect() method of any document element will return an object with top, left, bottom, and right properties describing the location of the element in the viewport.
